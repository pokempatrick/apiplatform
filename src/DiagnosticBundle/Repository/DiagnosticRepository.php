<?php

namespace DiagnosticBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * DiagnosticRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DiagnosticRepository extends \Doctrine\ORM\EntityRepository
{
	public function getDiagnosticIndex($nombreParPage, $page)
	{
		// On déplace la vérification du numéro de page dans cette méthode
		if ($page < 1) {
			throw new \InvalidArgumentException('L\'argument $page ne peut
				être inférieur à 1 (valeur : "'.$page.'").');
		} 
		// La construction de la requête reste inchangée

		$qb = $this->createQueryBuilder('p');
		$qb=$this->andTransformer($qb);
		$qb=$this->andResult($qb);
		$query = $qb->getQuery();
		// On définit la demande  à partir de laquel commencer la liste
		$query->setFirstResult(($page-1) * $nombreParPage)
				->setMaxResults($nombreParPage);
		// (n'oubliez pas le use correspondant en début de fichier)
		$paginator =  new Paginator($query);
		return $paginator->getQuery()->getArrayResult();
	}

	public function findDiagnosticSerialOrMatricule($name)
	{
		$qb = $this->createQueryBuilder('p');
		$qb=$this->andTransformer($qb);
		$qb->where('t.serie LIKE :name')
			->orWhere('t.matricule LIKE :name')
			->orderBy('p.date', 'DESC')
			->setParameter('name','%'.$name.'%');
		return $qb->getQuery()->getResult();
	}
	public function findQualitySerialOrMatricule($name)
	{
		$qb = $this->_em->createQueryBuilder();
		$qb->select('p')
			->from('QualityBundle:Quality', 'p');
		$qb=$this->andTransformer($qb);
		$qb->where('t.serie LIKE :name')
			->orWhere('t.matricule LIKE :name')
			->orderBy('p.date', 'DESC')
			->setParameter('name','%'.$name.'%');
		return $qb->getQuery()->getResult();
	}
	public function findRepairSerialOrMatricule($name)
	{
		$qb = $this->_em->createQueryBuilder();
		$qb->select('p')
			->from('RepairBundle:Repair', 'p');
		$qb=$this->andTransformer($qb);
		$qb->where('t.serie LIKE :name')
			->orWhere('t.matricule LIKE :name')
			->orderBy('p.date', 'DESC')
			->setParameter('name','%'.$name.'%');
		return $qb->getQuery()->getResult();
	}
	public function findDowngradingSerialOrMatricule($name)
	{
		$qb = $this->_em->createQueryBuilder();
		$qb->select('p')
			->from('DowngradingBundle:Downgrading', 'p');
		$qb=$this->andTransformer($qb);
		$qb->where('t.serie LIKE :name')
			->orWhere('t.matricule LIKE :name')
			->orderBy('p.date', 'DESC')
			->setParameter('name','%'.$name.'%');
		return $qb->getQuery()->getResult();
	}
	public function findStoreEntranceSerialOrMatricule($name)
	{
		$qb = $this->_em->createQueryBuilder();
		$qb->select('p')
			->from('StoreEntranceBundle:StoreEntrance', 'p');
		$qb=$this->andTransformer($qb);
		$qb->where('t.serie LIKE :name')
			->orWhere('t.matricule LIKE :name')
			->orderBy('p.date', 'DESC')
			->setParameter('name','%'.$name.'%');
		return $qb->getQuery()->getResult();
	}
	public function findThirdPartySerialOrMatricule($name)
	{
		$qb = $this->_em->createQueryBuilder();
		$qb->select('p')
			->from('ThirdPartyBundle:ThirdParty', 'p');
		$qb=$this->andTransformer($qb);
		$qb->where('t.serie LIKE :name')
			->orWhere('t.matricule LIKE :name')
			->orderBy('p.date', 'DESC')
			->setParameter('name','%'.$name.'%');
		return $qb->getQuery()->getResult();
	}


	private function andTransformer(\Doctrine\ORM\QueryBuilder $qb)
	{
		return $qb->leftJoin('p.transformer','t')
					->addSelect('t');
	}

	private function andResult(\Doctrine\ORM\QueryBuilder $qb)
	{
		return $qb->leftJoin('p.result','r')
					->addSelect('r');
	}
}
